// Code generated by MockGen. DO NOT EDIT.
// Source: ./translation.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/staszigzag/go-custom-template/internal/models"
)

// MocktranslationRepo is a mock of translationRepo interface.
type MocktranslationRepo struct {
	ctrl     *gomock.Controller
	recorder *MocktranslationRepoMockRecorder
}

// MocktranslationRepoMockRecorder is the mock recorder for MocktranslationRepo.
type MocktranslationRepoMockRecorder struct {
	mock *MocktranslationRepo
}

// NewMocktranslationRepo creates a new mock instance.
func NewMocktranslationRepo(ctrl *gomock.Controller) *MocktranslationRepo {
	mock := &MocktranslationRepo{ctrl: ctrl}
	mock.recorder = &MocktranslationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktranslationRepo) EXPECT() *MocktranslationRepoMockRecorder {
	return m.recorder
}

// GetHistory mocks base method.
func (m *MocktranslationRepo) GetHistory(arg0 context.Context) ([]models.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", arg0)
	ret0, _ := ret[0].([]models.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MocktranslationRepoMockRecorder) GetHistory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MocktranslationRepo)(nil).GetHistory), arg0)
}

// Store mocks base method.
func (m *MocktranslationRepo) Store(arg0 context.Context, arg1 models.Translation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MocktranslationRepoMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MocktranslationRepo)(nil).Store), arg0, arg1)
}

// MocktranslationWebAPI is a mock of translationWebAPI interface.
type MocktranslationWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MocktranslationWebAPIMockRecorder
}

// MocktranslationWebAPIMockRecorder is the mock recorder for MocktranslationWebAPI.
type MocktranslationWebAPIMockRecorder struct {
	mock *MocktranslationWebAPI
}

// NewMocktranslationWebAPI creates a new mock instance.
func NewMocktranslationWebAPI(ctrl *gomock.Controller) *MocktranslationWebAPI {
	mock := &MocktranslationWebAPI{ctrl: ctrl}
	mock.recorder = &MocktranslationWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktranslationWebAPI) EXPECT() *MocktranslationWebAPIMockRecorder {
	return m.recorder
}

// Translate mocks base method.
func (m *MocktranslationWebAPI) Translate(arg0 models.Translation) (models.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", arg0)
	ret0, _ := ret[0].(models.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MocktranslationWebAPIMockRecorder) Translate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MocktranslationWebAPI)(nil).Translate), arg0)
}
